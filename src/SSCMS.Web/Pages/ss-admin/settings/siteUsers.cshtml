@page
@using SSCMS.Services
@inject IAuthManager authManager

@{ 
    ///EL: 复制users.cshtml 修改
    Layout = "_Layout"; }
<el-form :inline="true" :model="formInline" size="mini"   >
  <el-form-item label="状态">
    <el-select v-model="formInline.state" placeholder="用户组" >
      <el-option label="<全部状态>" value=""></el-option>
      <el-option label="待审核" value="false"></el-option>
      <el-option label="已审核" value="true"></el-option>
    </el-select>
  </el-form-item>
  <el-form-item label="用户组">
    <el-select v-model="formInline.groupId" placeholder="用户组">
      <el-option label="<全部用户组>" :value="-1"></el-option>
      <el-option
        v-for="group in groups"
        :key="group.id"
        :label="group.groupName"
        :value="group.id">
      </el-option>
    </el-select>
  </el-form-item>
  <el-form-item label="排序">
    <el-select v-model="formInline.order" placeholder="排序">
      <el-option label="<默认>" value=""></el-option>
      <el-option label="登录名称" value="UserName"></el-option>
      <el-option label="最后登录日期" value="LastActivityDate"></el-option>
      <el-option label="创建日期" value="CreatedDate"></el-option>
      <el-option label="登录次数" value="CountOfLogin"></el-option>
    </el-select>
  </el-form-item>
  <el-form-item label="最后登录">
    <el-select v-model="formInline.lastActivityDate" placeholder="最后登录">
      <el-option label="<全部时间>" :value="0"></el-option>
      <el-option label="1天内" :value="1"></el-option>
      <el-option label="2天内" :value="2"></el-option>
      <el-option label="3天内" :value="3"></el-option>
      <el-option label="1周内" :value="7"></el-option>
      <el-option label="1个月内" :value="30"></el-option>
      <el-option label="3个月内" :value="90"></el-option>
      <el-option label="半年内" :value="180"></el-option>
      <el-option label="1年内" :value="365"></el-option>
    </el-select>
  </el-form-item>
  <el-form-item label="关键字">
    <el-input v-model="formInline.keyword" placeholder="关键字"></el-input>
  </el-form-item>
  
  <el-form-item>
    <el-button type="primary" v-on:click="btnSearchClick"  >查询</el-button>
  </el-form-item>
</el-form>

<el-table
  :data="items"
  style="width: 100%">
  <el-table-column
    label="头像" width="100">
    <template slot-scope="scope">
      <el-link :underline="false" v-on:click="btnViewClick(scope.row.id)">
        <el-badge v-if="!scope.row.checked" style="margin-top: 10px;" value="待审核">
          <el-avatar :size="40" :src="scope.row.avatarUrl || utils.getAssetsUrl('images/default_avatar.png')"></el-avatar>
        </el-badge>
        <el-badge v-else-if="scope.row.locked" style="margin-top: 10px;" value="锁定">
          <el-avatar :size="40" :src="scope.row.avatarUrl || utils.getAssetsUrl('images/default_avatar.png')"></el-avatar>
        </el-badge>
        <el-avatar v-else :size="40" :src="scope.row.avatarUrl || utils.getAssetsUrl('images/default_avatar.png')"></el-avatar>
      </el-link>
    </template>
  </el-table-column>
  <el-table-column
    label="账号">
    <template slot-scope="scope">
      <el-link :underline="false" type="primary" v-on:click="btnViewClick(scope.row.id)">{{scope.row.userName}}</el-link>
    </template>
  </el-table-column>
  <el-table-column
    prop="displayName"
    label="姓名">
  </el-table-column>
  <el-table-column label="手机" width="120">
    <template slot-scope="scope">
      <div v-if="scope.row.mobile">
        {{ scope.row.mobile }}
        <el-tag v-if="scope.row.mobileVerified">已验证</el-tag>
        <el-tag v-else type="warning">待验证</el-tag>
      </div>
    </template>
  </el-table-column>
  <el-table-column
    width="180"
    prop="lastActivityDate"
    label="最后登录">
  </el-table-column>
  <el-table-column
    prop="countOfLogin"
    label="登录次数">
  </el-table-column>
  <el-table-column label="用户组">
    <template slot-scope="scope">
      {{ getGroupName(scope.row.groupId) }}
    </template>
  </el-table-column>
  <el-table-column label="操作" width="350">
    <template slot-scope="scope">
      <el-button-group>
        <el-button
          size="mini"
          v-on:click="btnEditClick(scope.row)">编辑</el-button>
        <el-button
          size="mini"
          v-on:click="btnPasswordClick(scope.row)">更改密码</el-button>
        <el-button
          v-if="!scope.row.checked"
          size="mini"
          v-on:click="btnCheckClick(scope.row)">审核</el-button>
        <el-button
          v-if="scope.row.locked"
          size="mini"
          v-on:click="btnUnLockClick(scope.row)">解锁</el-button>
        <el-button
          v-else
          size="mini"
          v-on:click="btnLockClick(scope.row)">锁定</el-button>
        <el-button
          size="mini"
          type="danger"
          v-on:click="btnDeleteClick(scope.row)">删除</el-button>
      </el-button-group>
    </template>
  </el-table-column>
</el-table>

<div style="text-align: center; margin-top: 10px;" >
  <el-pagination
    v-on:current-change="handleCurrentChange"
    :current-page="formInline.currentPage"
    :page-size="formInline.limit"
    layout="total, prev, pager, next, jumper"
    :total="count">
  </el-pagination>
</div>

<div style="height: 10px"></div>

<el-row>
  <el-divider></el-divider>
  <div style="height: 10px"></div>
  <el-button size="small" plain type="primary" style="margin-left: 0px;" icon="el-icon-plus" v-on:click="btnAddClick">
    新 增
  </el-button>
  <el-button  v-if="false" size="small" plain type="primary" style="margin-left: 0px;" icon="el-icon-upload" v-on:click="btnImportClick">
    导 入
  </el-button>
  <el-button v-if="false"  size="small" plain type="primary" style="margin-left: 0px;" icon="el-icon-download" v-on:click="btnExportClick">
    导 出
  </el-button>
</el-row>

<el-drawer
  title="导入用户"
  ref="uploadPanel"
  :visible.sync="uploadPanel"
  destroy-on-close
  direction="rtl"
  size="50%">
  <div class="drawer__content">
    <br />
    <el-form ref="uploadForm" label-width="200px">
      <el-upload
        :drag="true"
        :limit="1"
        :action="$urlUpload"
        :auto-upload="true"
        :headers="{Authorization: 'Bearer ' + $token}"
        :file-list="uploadList"
        :before-upload="uploadBefore"
        :on-progress="uploadProgress"
        :on-success="uploadSuccess"
        :on-error="uploadError"
        :multiple="false">
        <i class="el-icon-upload"></i>
        <div class="el-upload__text">将文件拖到此处，或 <em>点击上传</em></div>
        <div class="el-upload__tip" slot="tip">
          <el-link :underline="false" type="primary" :href="utils.getAssetsUrl('uploadtemplates/用户导入模版.xlsx')" target="_blank">
            <i class="el-icon-download"></i>
            下载导入模版
          </el-link>
        </div>
      </el-upload>
    </el-form>
  </div>
</el-drawer>

@section Scripts{
   @*
    ///EL: 复制 users.js 修改
   *@
   <script>
  
var $url ='/settings/users';
var $urlDelete = $url + '/actions/delete';
var $urlExport = $url + '/actions/export';
var $urlUpload = $apiUrl + '/settings/users/actions/import';
var siteUserUrl = $url+'/siteUser'
var data = utils.init({
  items: null,
  count: null,
  groups: null,
  formInline: {
    state: '',
    groupId: -1,
    order: '',
    lastActivityDate: 0,
    keyword: '',
    currentPage: 1,
    offset: 0,
    limit: 30
  },
  uploadPanel: false,
  uploadLoading: false,
  uploadList: []
});

var methods = {
  apiGet: function () {
    var $this = this;
    $api.get(siteUserUrl, {
      params: this.formInline
    }).then(function (response) {
      var res = response.data;

      $this.items = res.users;
      $this.count = res.count;
      $this.groups = res.groups;
    }).catch(function (error) {
      utils.error(error);
    }).then(function () {
      utils.loading($this, false);
    });
  },

  getGroupName: function (groupId) {
    var group = _.find(this.groups, function (x) { return x.id === groupId; });
    return group ? group.groupName :'默认用户组';
  },

  btnViewClick: function(userId) {
    utils.openLayer({
      title: '查看资料',
      url: utils.getCommonUrl('userLayerView', {userId: userId})
    });
  },

  btnAddClick: function() {
      let self=this
    utils.openLayer({
      title: '添加用户',
      url: utils.getSettingsUrl('usersLayerProfile',{siteId:self.formInline.siteId})
    });
  },

  btnEditClick: function(row) {
       let self=this
    utils.openLayer({
      title: '编辑用户',
      url: utils.getSettingsUrl('usersLayerProfile', {userId: row.id,siteId:self.formInline.siteId})
    });
  },

  btnPasswordClick: function(row) {
    utils.openLayer({
      title: '更改密码',
      url: utils.getSettingsUrl('usersLayerPassword', {userId: row.id})
    });
  },

  btnExportClick: function() {
    var $this = this;

    utils.loading(this, true);
    $api.post($urlExport).then(function (response) {
      var res = response.data;

      window.open(res.value);
    }).catch(function (error) {
      utils.error(error);
    }).then(function () {
      utils.loading($this, false);
    });
  },

  apiDelete: function(item) {
    var $this = this;

    utils.loading(this, true);
    $api.post($urlDelete, {
      id: item.id
    }).then(function (response) {
      var res = response.data;

      $this.items.splice($this.items.indexOf(item), 1);
    }).catch(function (error) {
      utils.error(error);
    }).then(function () {
      utils.loading($this, false);
    });
  },

  btnDeleteClick: function (item) {
    var $this = this;

    utils.alertDelete({
      title: '删除用户',
      text: '此操作将删除用户 ' + item.userName + '，确定吗？',
      callback: function () {
        $this.apiDelete(item);
      }
    });
  },

  apiCheck: function (item) {
    var $this = this;

    utils.loading(this, true);
    $api.post($url + '/actions/check', {
      id: item.id
    }).then(function (response) {
      var res = response.data;

      item.checked = true;
    }).catch(function (error) {
      utils.error(error);
    }).then(function () {
      utils.loading($this, false);
    });
  },

  btnCheckClick: function(item) {
    var $this = this;

    utils.alertWarning({
      title: '审核用户',
      text: '此操作将设置用户 ' + item.userName + ' 的状态为审核通过，确定吗？',
      callback: function () {
        $this.apiCheck(item);
      }
    });
  },

  apiLock: function (item) {
    var $this = this;

    utils.loading(this, true);
    $api.post($url + '/actions/lock', {
      id: item.id
    }).then(function (response) {
      var res = response.data;

      item.locked = true;
    }).catch(function (error) {
      utils.error(error);
    }).then(function () {
      utils.loading($this, false);
    });
  },

  btnLockClick: function(item) {
    var $this = this;

    utils.alertWarning({
      title: '锁定用户',
      text: '此操作将锁定用户 ' + item.userName + '，确定吗？',
      callback: function () {
        $this.apiLock(item);
      }
    });
  },

  apiUnLock: function (item) {
    var $this = this;

    utils.loading(this, true);
    $api.post($url + '/actions/unLock', {
      id: item.id
    }).then(function (response) {
      var res = response.data;

      item.locked = false;
    }).catch(function (error) {
      utils.error(error);
    }).then(function () {
      utils.loading($this, false);
    });
  },

  btnUnLockClick: function(item) {
    var $this = this;

    utils.alertWarning({
      title: '解锁用户',
      text: '此操作将解锁用户 ' + item.userName + '，确定吗？',
      callback: function () {
        $this.apiUnLock(item);
      }
    });
  },

  btnSearchClick() {
    var $this = this;

    utils.loading(this, true);
    $api.get(siteUserUrl, {
      params: this.formInline
    }).then(function (response) {
      var res = response.data;

      $this.items = res.users;
      $this.count = res.count;
    }).catch(function (error) {
      utils.error(error);
    }).then(function () {
      utils.loading($this, false);
    });
  },

  handleCurrentChange: function(val) {
    this.formInline.currentValue = val;
    this.formInline.offset = this.formInline.limit * (val - 1);

    this.btnSearchClick();
  },

  btnImportClick: function() {
    this.uploadPanel = true;
  },

  uploadBefore(file) {
    var isExcel = file.name.indexOf('.xlsx', file.name.length - '.xlsx'.length) !== -1;
    if (!isExcel) {
      utils.error('用户导入文件只能是 Excel 格式!');
    }
    return isExcel;
  },

  uploadProgress: function() {
    utils.loading(this, true);
  },

  uploadSuccess: function(res, file) {
    this.uploadPanel = false;

    var success = res.success;
    var failure = res.failure;
    var errorMessage = res.errorMessage;

    var $this = this;

    $api.get(siteUserUrl, {
      params: this.formInline
    }).then(function (response) {
      var res = response.data;

      $this.items = res.users;
      $this.count = res.count;
      $this.groups = res.groups;
    }).catch(function (error) {
      utils.error(error);
    }).then(function () {
      if (success) {
        utils.success('成功导入 ' + success + ' 名用户！');
      }
      if (errorMessage) {
        utils.error(failure + ' 名用户导入失败：' + errorMessage);
      }
      utils.loading($this, false);
    });
  },

  uploadError: function(err) {
    utils.loading(this, false);
    var error = JSON.parse(err.message);
    utils.error(error.message);
  },

  btnCloseClick: function() {
    utils.removeTab();
  },
};

var $vue = new Vue({
  el: '#main',
  data: data,
  methods: methods,
  created: function () {
    var $this = this;
    utils.keyPress(null, function() {
      if ($this.uploadPanel) {
        $this.uploadPanel = false;
      } else {
        $this.btnCloseClick();
      }
    });
    this.formInline.siteId = new URL(window.location).searchParams.get('siteId'); //EL:添加站点id参数
    this.apiGet();
  }
});
</script>
}